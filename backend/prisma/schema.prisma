generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(uuid())
  /// Full name of a user
  name                String         @db.VarChar(200)
  birth_year          Int?
  sex                 Sex?
  phone               String?        @db.VarChar(20)
  email               String         @unique @db.VarChar(80)
  location            String?
  photo_url           String?        @db.VarChar(300)
  role                Role           @default(user)
  User_Security       User_Security?
  user_wishlist       User_Wishlist[]
  viewed_cars         Users_Viewed_Cars[]
  user_comparisons    Comparison[]
  users_searches_cars Users_Searches_Cars[]
  autoria_viewed_cars Users_Autoria_Viewed_Cars[]
}

model User_Security {
  id                     String  @id @default(uuid())
  user                   User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id                String  @unique @db.VarChar(300)
  password               String? @db.VarChar(300)
  password_change_token  String? @db.VarChar(300)
  email_activation_token String? @unique @db.VarChar(300)
  email_change_token     String? @db.VarChar(300)
  email_provisional      String? @db.VarChar(300)
  refresh_token          String? @db.VarChar(300)
  google_acc_id          String? @unique @db.VarChar(300)
  facebook_acc_id        String? @unique @db.VarChar(300)
}

model User_Wishlist {
  id               String        @id @default(uuid())
  user_id          String
  user             User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  model_id         String?
  model            Model?         @relation(fields: [model_id], references: [id])
  complectation_id String?
  complectation    Complectation? @relation(fields: [complectation_id], references: [id])
  created_at       DateTime      @default(now())
}

model Users_Viewed_Cars {
  id                  String              @id @default(uuid())
  user                User                @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id             String
  complectation       Complectation       @relation(fields: [complectation_id], references: [id])
  complectation_id    String              @db.VarChar(300)
  created_at          DateTime            @default(now())
}

model Users_Searches_Cars {
  id                  String              @id @default(uuid())
  user                User                @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id             String
  model               Model               @relation(fields: [model_id], references: [id])
  model_id            String              @db.VarChar(300)
  created_at          DateTime            @default(now())
}

model Users_Autoria_Viewed_Cars {
  id              String   @id @default(uuid())
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id         String
  model           Model    @relation(fields: [model_id], references: [id])
  model_id        String   @db.VarChar(300)
  autoria_code    Int
  created_at      DateTime @default(now())
}

model Autoria_Cars_Details {
  id                   String             @id @default(uuid())
  model                Model              @relation(fields: [model_id], references: [id])
  model_id             String             @db.VarChar(300)
  autoria_code         Int                @unique @db.Int
  race                 Int
  city                 City?              @relation(fields: [city_id], references: [id])
  city_id              String?            @db.VarChar(300)
  transmission_type    Transmission_Type? @relation(fields: [transmission_type_id], references: [id])
  transmission_type_id String?            @db.VarChar(300)
  fuel_type            Fuel_Type?         @relation(fields: [fuel_type_id], references: [id])
  fuel_type_id         String?            @db.VarChar(300)
  price                Int
  autoria_url          String?            @db.VarChar(300)
  photo_url            String?            @db.VarChar(300)
  created_at           DateTime           @default(now())
}

model Body_Type {
  id           String @id @default(uuid())
  name         String @db.VarChar(300)
  autoria_code Int
  models       Model[]
}

model Manufacturer_Country {
  id           String @id @default(uuid())
  name         String @db.VarChar(300)
  autoria_code Int
  models       Model[]
}

model Brand {
  id           String @id @default(uuid())
  name         String @db.VarChar(70)
  logo_url     String @db.VarChar(250)
  autoria_code Int
  models       Model[]
}

model Model {
  id                     String               @id @default(uuid())
  manufacturer_id        String
  manufacture_country    Manufacturer_Country @relation(fields: [manufacture_country_id], references: [id])
  body_type_id           String
  body_type              Body_Type            @relation(fields: [body_type_id], references: [id])
  manufacture_country_id String
  brand                  Brand                @relation(fields: [manufacturer_id], references: [id])
  name                   String               @db.VarChar(70)
  description            String               @db.VarChar(1000)
  code_name              String               @db.VarChar(70)
  year_start             Int
  year_end               Int?
  photo_urls             Json
  autoria_code           Int
  complectations         Complectation[]
  prices_ranges          Prices_Range[]
  users_wishlists        User_Wishlist[]
  users_searches_cars    Users_Searches_Cars[]
  autoria_viewed_cars    Users_Autoria_Viewed_Cars[]
  autoria_cars_details   Autoria_Cars_Details[]
  created_at          DateTime            @default(now())
}

model Drivetrain {
  id             String @id @default(uuid())
  name           String @db.VarChar(300)
  autoria_code   Int
  complectations Complectation[]
}

model Fuel_Type {
  id             String @id @default(uuid())
  name           String @db.VarChar(300)
  autoria_code   Int @unique @db.Int
  complectations Complectation[]
  autoria_cars_details Autoria_Cars_Details[]
}

model Color {
  id             String @id @default(uuid())
  name           String @db.VarChar(300)
  autoria_code   Int
  complectations Complectation[]
}

model Transmission_Type {
  id             String @id @default(uuid())
  name           String @db.VarChar(300)
  autoria_code   Int @unique @db.Int
  complectations Complectation[]
  autoria_cars_details Autoria_Cars_Details[]
}

model Option {
  id             String @id @default(uuid())
  name           String @db.VarChar(300)
  autoria_code   Int
  type           Type
  complectations ComplectationsOnOptions[]
}

model Complectation {
  id                          String                        @id @default(uuid())
  name                        String                        @db.VarChar(70)
  model_id                    String
  model                       Model                         @relation(fields: [model_id], references: [id])
  engine                      String                        @db.VarChar(300)
  engine_displacement         Decimal
  engine_power                Int
  color_id                    String
  color                       Color                         @relation(fields: [color_id], references: [id])
  drivetrain_id               String
  drivetrain                  Drivetrain                    @relation(fields: [drivetrain_id], references: [id])
  fuel_type_id                String
  fuel_type                   Fuel_Type                     @relation(fields: [fuel_type_id], references: [id])
  transmission_type_id        String
  transmission_type           Transmission_Type             @relation(fields: [transmission_type_id], references: [id])
  options                     ComplectationsOnOptions[]
  prices_ranges               Prices_Range[]
  users_wishlists             User_Wishlist[]
  users_viewed_cars           Users_Viewed_Cars[]
  comparisons_complectations  Comparisons_Complectations[]
}

model ComplectationsOnOptions {
  complectation    Complectation @relation(fields: [complectation_id], references: [id])
  complectation_id String
  option           Option        @relation(fields: [option_id], references: [id])
  option_id        String
  important        Boolean       @default(false)

  @@id([complectation_id, option_id])
}

model Prices_Range {
  id                  String         @id @default(uuid())
  model_id            String?
  model               Model?         @relation(fields: [model_id], references: [id])
  complectation_id    String?
  complectation       Complectation? @relation(fields: [complectation_id], references: [id])
  price_start         Int
  price_end           Int
  created_at          DateTime       @default(now())
}

model City {
  id                   String @id @default(uuid())
  name                 String @db.VarChar(300)
  autoria_code         Int @unique @db.Int
  region_id            String
  region               Region @relation(fields: [region_id], references: [id])
  autoria_cars_details Autoria_Cars_Details[]
}

model Region {
  id           String @id @default(uuid())
  name         String @db.VarChar(300)
  autoria_code Int
  cities       City[]
}

model Comparison {
  id                          String                        @id @default(uuid())
  active                      Boolean
  type                        ComparisonType                @default(all)
  created_at                  DateTime                      @default(now())
  updated_at                  DateTime
  user_id                     String
  user                        User                          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  comparisons_complectations  Comparisons_Complectations[]
}

model Comparisons_Complectations {
  id                String           @id @default(uuid())
  comparison_id     String
  complectation_id  String
  position          Int
  comparison        Comparison       @relation(fields: [comparison_id], references: [id], onDelete: Cascade)
  complectation     Complectation    @relation(fields: [complectation_id], references: [id])

  @@unique([comparison_id, complectation_id])
}

enum Role {
  user
  admin
}

enum Sex {
  male
  female
  not_known
  not_appliable
}

enum Type {
  security
  optics
  multimedia
  upholstery
  sound
  design
  comfort
  auxiliary
}

enum ComparisonType {
  all
  difference
}
